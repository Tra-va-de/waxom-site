name: Build and Deploy to Build Branch

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to checkout (default: main)'
        required: false
        default: 'main'

jobs:
  copy-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.WAXOM_SITE_WORKFLOW }}

      - name: Copy files from main to temporary directory
        run: |
          mkdir -p /tmp/main_files
          cp index.html /tmp/main_files 2>/dev/null || true
          mkdir -p /tmp/main_files/src
          # Копируем только нужные директории
          cp -r src/img /tmp/main_files/src/ 2>/dev/null || true
          cp -r src/fonts /tmp/main_files/src/ 2>/dev/null || true
          cp -r src/video /tmp/main_files/src/ 2>/dev/null || true
          cp -r src/js /tmp/main_files/src/ 2>/dev/null || true
          cp -r src/css /tmp/main_files/src/ 2>/dev/null || true

      - name: Switch to build branch and clean
        run: |
          git checkout build || git checkout -b build
          find . -not -path './.git*' -not -name '.' -delete
          rm -rf .github

      - name: Copy files to working directory
        run: |
          cp /tmp/main_files/index.html . 2>/dev/null || true
          cp -r /tmp/main_files/src/img . 2>/dev/null || true
          cp -r /tmp/main_files/src/fonts . 2>/dev/null || true
          cp -r /tmp/main_files/src/video . 2>/dev/null || true
          cp -r /tmp/main_files/src/js . 2>/dev/null || true
          # Проверяем, есть ли style.min.css, иначе копируем style.css
          if cp /tmp/main_files/src/css/style.min.css . 2>/dev/null; then
            echo "Copied style.min.css"
          elif cp /tmp/main_files/src/css/style.css . 2>/dev/null; then
            echo "style.min.css not found, copied style.css"
          else
            echo "Neither style.min.css nor style.css found, failing"
            exit 1
          fi

      - name: Clean up temporary directory
        run: rm -rf /tmp/main_files

      - name: Debug index.html before upload
        run: |
          echo "index.html before upload in copy-files:"
          cat index.html 2>/dev/null || echo "index.html not found"

      - name: Debug CSS file before upload
        run: |
          if [ -f style.min.css ]; then
            echo "style.min.css before upload in copy-files:"
            cat style.min.css
          elif [ -f style.css ]; then
            echo "style.css before upload in copy-files:"
            cat style.css
          fi

      - name: Upload unchanged files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: unchanged-files
          path: |
            img/
            fonts/
            video/

      - name: Upload CSS files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: css-files
          path: |
            style.min.css
            style.css

      - name: Upload HTML files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-files
          path: |
            index.html

      - name: Upload JS files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: js-files
          path: |
            js/

  update-paths:
    runs-on: ubuntu-latest
    needs: copy-files
    steps:
      - name: Download HTML files
        uses: actions/download-artifact@v4
        with:
          name: html-files
          path: .

      - name: Download CSS files
        uses: actions/download-artifact@v4
        with:
          name: css-files
          path: .

      - name: Debug index.html before update
        run: |
          echo "index.html before update in update-paths:"
          cat index.html 2>/dev/null || echo "index.html not found"

      - name: Update HTML and CSS paths
        run: |
          # Определяем, какой CSS файл обновлять
          if [ -f style.min.css ]; then
            CSS_FILE="style.min.css"
            echo "Updating paths in style.min.css"
          elif [ -f style.css ]; then
            CSS_FILE="style.css"
            echo "Updating paths in style.css"
          else
            echo "Neither style.min.css nor style.css found, failing"
            exit 1
          fi
          # Обновляем тег <link> в index.html
          sed -i 's|<link[^>]*rel=["'\'']stylesheet["'\''][^>]*href=["'\'']\.\?\/*src\/css\/style\(.\min\)\?.css["'\'']|<link rel="stylesheet" href="style.css"|' index.html
          sed -i 's|<link[^>]*rel=["'\'']stylesheet["'\''][^>]*href=["'\'']\.\?\/*css\/style\(.\min\)\?.css["'\'']|<link rel="stylesheet" href="style.css"|' index.html
          # Удаляем префикс src/ из всех путей в index.html
          sed -i 's|\.\?\/*src\/||g' index.html
          # Отладка после обновления HTML
          echo "index.html after update in update-paths:"
          cat index.html 2>/dev/null || echo "index.html not found"
          # Обновляем пути в CSS
          echo "Before updating CSS paths in $CSS_FILE:"
          cat "$CSS_FILE"
          sed -i 's/@import'\''\.\.\/\([^'\'']*\)'\''/@import '\''\1'\''/g' "$CSS_FILE"
          echo "After updating @import paths in $CSS_FILE:"
          cat "$CSS_FILE"
          sed -i 's/url("\.\.\/\([^"]*\)"/url("\1"/g' "$CSS_FILE"
          echo "After updating url() paths in $CSS_FILE:"
          cat "$CSS_FILE"

      - name: Upload updated HTML files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: html-files
          path: |
            index.html

      - name: Upload updated CSS files as artifact
        uses: actions/upload-artifact@v4
        with:
          name: css-files
          path: |
            style.min.css
            style.css

  minify-css:
    runs-on: ubuntu-latest
    needs: update-paths
    steps:
      - name: Download CSS files
        uses: actions/download-artifact@v4
        with:
          name: css-files
          path: .

      - name: Set up Node.js for CSS minification
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Install uglifycss
        run: npm install uglifycss -g

      - name: Minify or rename CSS
        run: |
          if [ -f style.min.css ]; then
            echo "Found style.min.css, renaming to style.css"
            mv style.min.css style.css
          elif [ -f style.css ]; then
            echo "Found style.css, minifying"
            uglifycss style.css > style.min.css
            mv style.min.css style.css
            echo "Minified style.css"
          else
            echo "Neither style.min.css nor style.css found, failing"
            exit 1
          fi

      - name: Debug style.css after minification
        run: |
          echo "style.css after minification in minify-css:"
          cat style.css

      - name: Upload minified CSS as artifact
        uses: actions/upload-artifact@v4
        with:
          name: minified-css
          path: |
            style.css

  minify-html:
    runs-on: ubuntu-latest
    needs: update-paths
    steps:
      - name: Download HTML files
        uses: actions/download-artifact@v4
        with:
          name: html-files
          path: .

      - name: Debug index.html before minification
        run: |
          echo "index.html before minification in minify-html:"
          cat index.html 2>/dev/null || echo "index.html not found"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Install html-minifier
        run: npm install html-minifier -g

      - name: Minify HTML
        run: html-minifier --collapse-whitespace --remove-comments index.html -o index.html

      - name: Debug index.html after minification
        run: |
          echo "index.html after minification in minify-html:"
          cat index.html 2>/dev/null || echo "index.html not found"

      - name: Upload minified HTML as artifact
        uses: actions/upload-artifact@v4
        with:
          name: minified-html
          path: index.html

  minify-js:
    runs-on: ubuntu-latest
    needs: update-paths
    steps:
      - name: Download JS files
        uses: actions/download-artifact@v4
        with:
          name: js-files
          path: .

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Install uglify-js
        run: npm install uglify-js -g

      - name: Debug JS files before minification
        run: |
          echo "JS files found:"
          find js/ -type f -name "*.js" 2>/dev/null || echo "No JS files found"

      - name: Minify JS
        run: |
          if [ -d js ]; then
            find js/ -type f -name "*.js" -exec sh -c 'uglifyjs "{}" --mangle --compress > "{}.tmp" && mv "{}.tmp" "{}"' \;
          else
            echo "js/ directory not found, skipping minification"
          fi

      - name: Upload minified JS as artifact
        uses: actions/upload-artifact@v4
        with:
          name: minified-js
          path: |
            js/

  deploy:
    runs-on: ubuntu-latest
    needs: [minify-css, minify-html, minify-js]
    steps:
      - name: Checkout build branch
        uses: actions/checkout@v4
        with:
          ref: build
          token: ${{ secrets.WAXOM_SITE_WORKFLOW }}

      - name: Download minified HTML
        uses: actions/download-artifact@v4
        with:
          name: minified-html
          path: .

      - name: Download minified CSS
        uses: actions/download-artifact@v4
        with:
          name: minified-css
          path: .

      - name: Download minified JS
        uses: actions/download-artifact@v4
        with:
          name: minified-js
          path: .

      - name: Download unchanged files
        uses: actions/download-artifact@v4
        with:
          name: unchanged-files
          path: .

      - name: Debug final files before commit
        run: |
          echo "Final index.html before commit in deploy:"
          cat index.html 2>/dev/null || echo "index.html not found"
          echo "Final style.css before commit in deploy:"
          cat style.css 2>/dev/null || echo "style.css not found"
          echo "JS files after minification:"
          find js/ -type f -name "*.js" 2>/dev/null || echo "No JS files found"

      - name: Commit and push all changes
        run: |
          git config user.name "${{ secrets.USER_NAME }}"
          git config user.email "${{ secrets.USER_EMAIL }}"
          git add .
          git commit -m "Build from main: ${{ github.event.head_commit.message }} (SHA: ${{ github.sha }}) at $(date -u +'%Y-%m-%d %H:%M:%S UTC')" || true
          git push origin build
